"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class dt_communication_msg_t(object):
    __slots__ = ["timestamp", "group", "origin", "destination", "metadata", "txt", "length", "payload"]

    __typenames__ = ["int64_t", "string", "string", "string", "string", "string", "int32_t", "byte"]

    __dimensions__ = [None, None, None, None, None, None, None, ["length"]]

    def __init__(self):
        self.timestamp = 0
        self.group = ""
        self.origin = ""
        self.destination = ""
        self.metadata = ""
        self.txt = ""
        self.length = 0
        self.payload = ""

    def encode(self):
        buf = BytesIO()
        buf.write(dt_communication_msg_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        __group_encoded = self.group.encode('utf-8')
        buf.write(struct.pack('>I', len(__group_encoded)+1))
        buf.write(__group_encoded)
        buf.write(b"\0")
        __origin_encoded = self.origin.encode('utf-8')
        buf.write(struct.pack('>I', len(__origin_encoded)+1))
        buf.write(__origin_encoded)
        buf.write(b"\0")
        __destination_encoded = self.destination.encode('utf-8')
        buf.write(struct.pack('>I', len(__destination_encoded)+1))
        buf.write(__destination_encoded)
        buf.write(b"\0")
        __metadata_encoded = self.metadata.encode('utf-8')
        buf.write(struct.pack('>I', len(__metadata_encoded)+1))
        buf.write(__metadata_encoded)
        buf.write(b"\0")
        __txt_encoded = self.txt.encode('utf-8')
        buf.write(struct.pack('>I', len(__txt_encoded)+1))
        buf.write(__txt_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">i", self.length))
        buf.write(bytearray(self.payload[:self.length]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != dt_communication_msg_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return dt_communication_msg_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = dt_communication_msg_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        __group_len = struct.unpack('>I', buf.read(4))[0]
        self.group = buf.read(__group_len)[:-1].decode('utf-8', 'replace')
        __origin_len = struct.unpack('>I', buf.read(4))[0]
        self.origin = buf.read(__origin_len)[:-1].decode('utf-8', 'replace')
        __destination_len = struct.unpack('>I', buf.read(4))[0]
        self.destination = buf.read(__destination_len)[:-1].decode('utf-8', 'replace')
        __metadata_len = struct.unpack('>I', buf.read(4))[0]
        self.metadata = buf.read(__metadata_len)[:-1].decode('utf-8', 'replace')
        __txt_len = struct.unpack('>I', buf.read(4))[0]
        self.txt = buf.read(__txt_len)[:-1].decode('utf-8', 'replace')
        self.length = struct.unpack(">i", buf.read(4))[0]
        self.payload = buf.read(self.length)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if dt_communication_msg_t in parents: return 0
        tmphash = (0xf1e9d2def47c7527) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if dt_communication_msg_t._packed_fingerprint is None:
            dt_communication_msg_t._packed_fingerprint = struct.pack(">Q", dt_communication_msg_t._get_hash_recursive([]))
        return dt_communication_msg_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

